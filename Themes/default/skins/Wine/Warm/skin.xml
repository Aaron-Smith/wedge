<?xml version="1.0"?>
<!--
	This file can be ommitted from your skin, in which case it will use
	the folder name as the skin name, and "add" as the skin type.
	Make sure to save the file as UTF-8 if you're using special characters in it.
-->
<skin>

	<!--
		Name. This will only be shown to anyone who can change a skin.
	-->

	<name>
		Warm
	</name>

	<!--
		Type. Possible values:
			- add (default, add this skin to the root style)
			- replace (discard the root style and consider this as the basic style)

		Warnings:
			- All files should have their url() paths modified accordingly. e.g., url($images) instead of url(../images)
			- If you're offering nested skins (/skins/skin1/skin2/), skin2 can only be of the "add" type,
			  otherwise it should obviously be set directly below the top-level folder. (/skins/skin2/)
			- If you use "replace", you don't have to copy all files from the top-level skin, Wedge will automatically
			  retrieve the top-level files if any are missing from your skin. If you do import a file for further
			  modifications, though, make sure  you import all satellite files (*.something.css) into your skin as well.
	-->

	<type>
		add
	</type>

	<!--
		Comment. This HTML text will only be shown to users when selecting
		a skin, either for the default forum theme (admins), board theme
		(board owners) and default theme override (regular users, if allowed.)

		Use the opportunity to communicate credits or details to users.
		Technical information is best posted wherever you upload the file.
	-->

	<comment><![CDATA[
		By Nao.
	]]></comment>

	<!--
		Layout skeleton. Overrides the theme's $context['skeleton'] variable.
		The following uses pseudo-HTML to represent the final array.

			- Use <tags></tags> to define layers (functions called as wrappers around other functions)

			- Use <self closing tags /> to define blocks (i.e. straightforward functions)

			- If you have a block that you need to make sure will show up, make sure to specify an array of fallback layers.
			  e.g. wetem::add(array('my_layer', 'sidebar', ''), 'my_block') will try to add 'my_block' to 'my_layer',
			  and if not found, to the sidebar. It will fall back to 'default' (i.e. '') if nothing is found.

			- 'default' is the only required layer. All of the non-wrap layers below are recommended.
			  All blocks are also recommended -- modders will often try to send them data.
			  Rule of thumb: try to keep everything in your own themes and skins!

			- The indent="x" parameter, where x < 0 or x > 0, will indent the layer's content by x tabs.
	-->

	<skeleton>
		<!-- The html layer will show the html tag, the HTML headers and the JavaScript delayed events at the end. -->
		<html>
			<!-- Just the body tag. Mainly used as an anchor for adding layers right after it. -->
			<body>
				<!-- A global wrapper is not mandatory, but recommended for easy layout modifications. -->
				<wrapper>
					<!-- A sidebar wrapper is necessary if you want maximum compatibility. It should open and close a table, or a compatible div. -->
					<sidebar_wrap indent="-1">
						<sidebar>
							<!-- This is where Wedge will insert any side information. -->
							<search_box indent="-1" />
							<language_selector indent="-1" />
							<random_news indent="-1" />
						</sidebar>
					</sidebar_wrap>

					<!-- We usually need to add a wrapper after the sidebar that will be defined as a table cell. -->
					<offside_wrap indent="-1">
						<indenter indent="1">

							<header>
								<!-- The header layer: top bar, logo, things like that... -->
							</header>

							<!-- The main menu. -->
							<menu />

							<!-- The navigation bar (linktree.) -->
							<linktree />

							<content_wrap>
								<main_wrap>
									<top>
										<!-- Used by menus, and anything that needs to be shown before the main entry point. -->
									</top>
									<default>
										<!-- The main entry point, where all pages add their content by default. -->
										<main />
									</default>
								</main_wrap>
							</content_wrap>

							<!-- Credits, validation links... -->
							<footer />

						</indenter>
					</offside_wrap>
				</wrapper>
			</body>
		</html>
	</skeleton>

	<!--
		Skin options. Wedge's default theme only offers two options for skins:

		<mobile> (meaning the skin is optimized for mobile devices.)
		<sidebar> (sidebar position)

		Possible values for <mobile> are '0' (false, also default) and '1' (true).
		Using boolean digits makes it possible to just test for !empty() on the variable.

		Possible values for <sidebar> are 'right' (default) and 'left'. If you want
		to add more values or even more options, you can do it by creating a new theme.
		Of course, you'll have to account for these new values in your own design.
		For instance, if you have a sidebar-like block in your default layer, try to make
		sure it's shown opposite the sidebar, or at least make sure that having both
		sidebars on the same side works.
	-->

	<options>
		<sidebar>
			left
		</sidebar>
	</options>

	<!--
		Code. This section allows you to define extra JavaScript that should be
		added at the end of the page. You can specify a target browser using the
		"for" keyword. You can also require some JavaScript files to be loaded,
		use the "include" keyword to specify a comma-separated list of files.
		They should either use a relative path based on the current theme, or
		the $here variable which acts as an alias to the skin's folder.
		If you use both keywords, use them in this order: for, and include.

		In the examples below, we're applying PNG compatibility fixes to IE6
		(loading the DD_belatedPNG script in the process); we're also allowing
		submit buttons to be styled, and finally we're changing the layout on
		iOS devices to show the sidebar below the main content.
	-->

	<code for="ie6" include="scripts/pngfix.js scripts/ie6hover.js"><![CDATA[
	$('input[type=checkbox], input[type=radio]').addClass('ie_check');
	$('input[type=submit], input[type=button]').addClass('ie_button');
	DD_belatedPNG.fix('.ping,#wedgelogo,#footer,#footer div.frame');
	$.ie6hover();
	]]></code>

	<code for="iphone,tablet"><![CDATA[
	$('#sidebar').insertBefore('#footer');
	]]></code>

	<!--
		CSS. This section allows you to define extra style rules that should be
		added at the top of the page. You should prefer the use of actual CSS
		files, unless you need to include an external file like a web font (by
		using the include parameter), or your inline styles use the "$behavior"
		keyword, which is mandatory if you want to use behavior files for IE.

		Examples (remove the ! from the css tags):
		<!css>.windowbg { behavior: url($behavior/Themes/default/PIE.htc); }</css>
		<!css include="http://fonts.googleapis.com/css?family=Droid+Sans:400,700"></css>
		Note that it isn't recommended to use web fonts on stock installs.
	-->

	<css for="no_browser"><![CDATA[
	.ie_sucks_anyway {}
	]]></css>

	<!--
		Macros. These examples are actually fairly useless since they just
		mostly repeat the default macros defined in index.template.php, but it
		makes it easier to get the point. Use these settings to override any
		macros set up in the theme with your own versions. For instance, you
		can change the header banner with little effort.
	-->

	<macro name="banner">
			{body}
			<if:logo><h1>
				<a href="<URL>">{logo}</a>
			</h1></if:logo></macro>

	<macro name="title"><header class="title">{body}</header></macro>

	<macro name="sidebar">
	<div id="edge">
		<aside id="sidebar"><div class="column">{body}</div></aside></macro>

	<macro name="sidebar" for="ie[-7]">
	<table id="edge"><tr><td id="sidebar" class="top"><div class="column">{body}</div></td></macro>

	<macro name="offside"><div id="offside">{body}</div></div></macro>
	<macro name="offside" for="ie[-7]"><td class="top">{body}</td></tr></table></macro>

	<!--
		Available languages: a comma-separated (or newline-separated) list of languages.
		If you use the $languages variable in your CSS, it means you're expecting to show
		a custom style depending on the language, e.g. background: url($here/icons/image-$language.png)
		would show 'image-french.png' if the user had their preferred language set to French.
		Since you can't account for all available languages, just list here all of those you did consider.

		The first in the list will be the fallback (usually English.)
		- Remove the bangs (!) to enable the feature. <languages> is the right tag for this.
		- Don't use the tag if you don't offer custom language styling, obviously, otherwise it will
		  just waste several bytes per page by adding the language name to the cached file URL.
	-->
	<!languages>
		english, french
	</!languages>

	<!--
		Replacements

		Use the replace tag to define a string to replace with another every time it is found in the HTML.
		The examples below are not actually used in Warm (they would slow it down by a few milliseconds for
		nothing), so they were disabled with a bang. Just replace !replace with replace. Do you copy?

		You can use the 'regex' parameter to play with regular expressions if you're comfortable with them.

		You may also use the <we:nested:tag> tag where you replace 'tag' with a HTML tag of your choice
		that should be recursively excluded. For instance, <li><we:nested:li></li> will match only those <li>
		tags that are NOT contained within another <li> tag. It is very useful to match the correct closer div
		for a div with a special ID or class, when you just want to add something *after* the closer div.

		!! NOTE: <we:nested> is not yet available in regex mode.
	-->
	<!replace>
		<from><div id="wedge"><we:nested:div></div></from>
		<to><div id="wedge">IT WORKED!!!! <we:nested:div> YES!!!</div></to>
	</!replace>

	<!replace regex>
		<from><aside id="sidebar">(.*?)</aside></from>
		<to><aside id="sidebar">Testing opener. $1 Testing closer.</aside></to>
	</!replace>

</skin>
