<?xml version="1.0"?>
<!--
	This file can be ommitted from your skin, in which case it will use
	the folder name as the skin name, and "add" as the skin type.
	Make sure to save the file as UTF-8 if you're using special characters in it.
-->
<skin>

	<!--
		Name. This will only be shown to anyone who can change a skin.
	-->

	<name>
		Warm
	</name>

	<!--
		Type. Possible values:
			- add (default, add this skin to the root style)
			- replace (discard the root style and consider this as the basic style)

		Warnings:
			- If you use "replace", make sure to copy all of the root CSS files (editor.css, etc) into your subfolder.
			- These files should have their url() paths modified accordingly. e.g., url($images) instead of url(../images)
			- If you're offering nested skins (/skins/skin1/skin2/), skin2 can only be of the "add" type,
			  otherwise it should obviously be set in a top-level folder. (/skins/skin2/)
	-->

	<type>
		add
	</type>

	<!--
		Comment. This HTML text will only be shown to users when selecting
		a skin, either for the default forum theme (admins), board theme
		(board owners) and default theme override (regular users, if allowed.)

		Use the opportunity to communicate credits or details to users.
		Technical information is best posted wherever you upload the file.
	-->

	<comment><![CDATA[
		By Nao.
	]]></comment>

	<!--
		Layout skeleton. Overrides the theme's $context['skeleton'] variable.
		The following uses pseudo-HTML to represent the final array.

			- Use <tags></tags> to define layers (functions called as wrappers around other functions)

			- Use <self closing tags /> to define blocks (i.e. straightforward functions)

			- If you have a block that you need to make sure will show up, make sure to specify an array.
			  e.g. wetem::load('my_block', array('my_layer', 'sidebar', 'default')) will try to add
			  'my_block' to 'my_layer', and if not found to the sidebar. It will fall back to
			  default if nothing is found -- the only layer guaranteed to be in the template.

			- DEFAULT is the only required layer. All of the non-wrap layers below are recommended.
			  All blocks are also recommended -- modders will often try to send them data.
			  Rule of thumb: try to keep everything in your own themes and skins!
	-->

	<skeleton>
		<!-- The html layer will show the html tag, the HTML headers and the JavaScript delayed events at the end. -->
		<html>
			<!-- Just the body tag. Mainly used as an anchor for adding layers right after it. -->
			<body>
				<!-- A global wrapper is not mandatory, but recommended for easy layout modifications. -->
				<wrapper>
					<!-- A sidebar wrapper is necessary if you want maximum compatibility. It should open and close a table, or a compatible div. -->
					<sidebar_wrap>
						<sidebar>
							<!-- This is where Wedge will insert any side information. -->
							<search_box />
							<language_selector />
							<random_news />
						</sidebar>
					</sidebar_wrap>

					<!-- We usually need to add a wrapper after the sidebar that will be defined as a table cell. -->
					<offside_wrap>

						<header>
							<!-- The header layer: top bar, logo, things like that... -->
						</header>

						<!-- The main menu. -->
						<menu />

						<!-- The navigation bar (linktree.) -->
						<linktree />

						<content_wrap>
							<main_wrap>
								<top>
									<!-- Used by menus, and anything that needs to be shown before the main entry point. -->
								</top>
								<default>
									<!-- The main entry point, where all pages add their content by default. -->
									<main />
								</default>
							</main_wrap>
						</content_wrap>

						<!-- Credits, validation links... -->
						<footer />
					</offside_wrap>
				</wrapper>
			</body>
		</html>
	</skeleton>

	<!--
		Code. This section allows you to define extra JavaScript that should be
		added at the end of the page. You can specify a target browser using the
		"for" keyword. You can also require some JavaScript files to be loaded,
		use the "include" keyword to specify a comma-separated list of files.
		They should either use a relative path based on the current theme, or
		the $here variable which acts as an alias to the skin's folder.
		If you use both keywords, use them in this order: for, and include.

		In the examples below, we're applying PNG compatibility fixes to IE6
		(loading the DD_belatedPNG script in the process); we're also allowing
		submit buttons to be styled, and finally we're changing the layout on
		iOS devices to show the sidebar below the main content.
	-->

	<code for="ie6" include="scripts/pngfix.js,scripts/ie6hover.js"><![CDATA[
	$('input[type=checkbox], input[type=radio]').addClass('ie_check');
	$('input[type=submit], input[type=button]').addClass('ie_button');
	DD_belatedPNG.fix('.ping,#wedgelogo,#footer,#footer div.frame');
	$.ie6hover();
	]]></code>

	<code for="iphone"><![CDATA[
	$('#main_content').insertBefore('#edge');
	]]></code>

	<!--
		CSS. This section allows you to define extra style rules that should be
		added at the top of the page. Really, the ONLY point is to be able to
		use the "$behavior" keyword, which is mandatory if you want to use
		behavior files for IE compatibility code. Otherwise, use CSS files!
		Example:
			.windowbg { behavior: url($behavior/Themes/default/PIE.htc); }
	-->

	<css for="no_browser"><![CDATA[
	.ie_sucks_anyway {}
	]]></css>

	<!--
		Macros. These examples are actually fairly useless since they just
		repeat the default macros defined in index.template.php, but it makes
		it easier to get the point. Use these settings to override any macros
		set up in the theme with your own versions. Makes it easier to change
		the header banner with limited effort.
	-->

	<macro name="header">
			<if:logo><h1>
				<a href="<we:scripturl>">{logo}</a>
			</h1></if:logo>
			{body}
	</macro>
	<macro name="title"><header class="title">{body}</header></macro>

	<macro name="offside"><div id="offside">{body}</div></div></macro>
	<macro name="offside" for="ie6,ie7"><td class="top">{body}</td></tr></table></macro>

</skin>
